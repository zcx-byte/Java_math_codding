public class Main {
    public static void main(String[] args) {

        int n = 5; // Размер исходной матрицы
        double[][] B = {
                {1, 1, 6, 2, 5, 1, 0, 0, 0, 0},
                {6, 9, 2, 8, 3, 0, 1, 0, 0, 0},
                {8, 9, 3, 3, 9, 0, 0, 1, 0, 0},
                {6, 9, 3, 6, 5, 0, 0, 0, 1, 0},
                {6, 5, 3, 5, 6, 0, 0, 0, 0, 1}
        };

        final double EPSILON = 0.00001; // Порог для проверки на ноль

        for (int k = 0; k < n; k++) {
            // Проверка ведущего элемента
            if (Math.abs(B[k][k]) < EPSILON) {
                int m = k + 1;
                // Поиск строки m > k с ненулевым элементом в столбце k
                while (m < n && Math.abs(B[m][k]) <= EPSILON) {
                    m++;
                }
                // Если строка не найдена, матрица вырождена
                if (m >= n) {
                    System.out.println("Матрица вырождена, обратная не существует.");
                    return; // Прерываем выполнение
                }
                // Прибавляем строку m к строке k
                for (int j = 0; j < 2 * n; j++) {
                    B[k][j] += B[m][j];
                }
            }

            // Метод прямоугольника: пересчёт элементов правее ведущего столбца и не в ведущей строке
            for (int i = 0; i < n; i++) {
                for (int j = k + 1; j < 2 * n; j++) {
                    if (i != k) {
                        B[i][j] = (B[i][j] * B[k][k] - B[k][j] * B[i][k]) / B[k][k];
                    }
                }
            }

            // Обнуление элементов ведущего столбца (кроме ведущего элемента)
            for (int i = 0; i < n; i++) {
                if (i != k) {
                    B[i][k] = 0.0;
                }
            }

            // Деление ведущей строки на ведущий элемент
            for (int j = 2 * n - 1; j >= k; j--) {
                B[k][j] = B[k][j] / B[k][k];
            }
        }

        // Вывод результата (обратной матрицы, правая половина)
        System.out.println("Обратная матрица (правая половина):");
        for (int i = 0; i < n; i++) {
            for (int j = n; j < 2 * n; j++) {
                System.out.printf("%8.2f ", B[i][j]); // 2 знака после запятой
            }
            System.out.println();
        }
    }
}
